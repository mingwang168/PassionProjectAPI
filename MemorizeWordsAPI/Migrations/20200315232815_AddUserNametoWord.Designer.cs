// <auto-generated />
using System;
using MemorizeWordsAPI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemorizeWordsAPI.Migrations
{
    [DbContext(typeof(MWContext))]
    [Migration("20200315232815_AddUserNametoWord")]
    partial class AddUserNametoWord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("MemorizeWordsAPI.Services.LearningSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DaysHaveLearned");

                    b.Property<int>("NumberOfDay");

                    b.Property<string>("UserName");

                    b.Property<int>("WordListID");

                    b.Property<int>("WordNumberPerDay");

                    b.HasKey("ScheduleID");

                    b.HasIndex("WordListID");

                    b.ToTable("LearningSchedules");

                    b.HasData(
                        new
                        {
                            ScheduleID = 1,
                            DaysHaveLearned = 2,
                            NumberOfDay = 5,
                            UserName = "mingwang",
                            WordListID = 1,
                            WordNumberPerDay = 20
                        });
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.Task", b =>
                {
                    b.Property<int>("taskID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ScheduleIDNavigationScheduleID");

                    b.Property<DateTime>("beginingTime");

                    b.Property<DateTime>("date");

                    b.Property<DateTime>("endingTime");

                    b.Property<int>("newWordNumber");

                    b.Property<int>("reviewWordNumber");

                    b.HasKey("taskID");

                    b.HasIndex("ScheduleIDNavigationScheduleID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChineseMeaning");

                    b.Property<string>("EnglishWord");

                    b.Property<string>("PhoneticSymbols");

                    b.Property<string>("UserName");

                    b.Property<int>("WordListID");

                    b.Property<bool>("time1");

                    b.Property<bool>("time2");

                    b.Property<bool>("time3");

                    b.Property<bool>("time4");

                    b.Property<bool>("time5");

                    b.Property<bool>("time6");

                    b.Property<bool>("time7");

                    b.Property<bool>("time8");

                    b.Property<int>("times");

                    b.HasKey("WordID");

                    b.HasIndex("WordListID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.WordList", b =>
                {
                    b.Property<int>("WordListID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserName");

                    b.Property<string>("WordListName");

                    b.Property<int>("WordNumber");

                    b.HasKey("WordListID");

                    b.ToTable("WordLists");

                    b.HasData(
                        new
                        {
                            WordListID = 1,
                            UserName = "mingwang",
                            WordListName = "A small word list for test",
                            WordNumber = 100
                        });
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.LearningSchedule", b =>
                {
                    b.HasOne("MemorizeWordsAPI.Services.WordList", "WordListIDNavigation")
                        .WithMany()
                        .HasForeignKey("WordListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.Task", b =>
                {
                    b.HasOne("MemorizeWordsAPI.Services.LearningSchedule", "ScheduleIDNavigation")
                        .WithMany()
                        .HasForeignKey("ScheduleIDNavigationScheduleID");
                });

            modelBuilder.Entity("MemorizeWordsAPI.Services.Word", b =>
                {
                    b.HasOne("MemorizeWordsAPI.Services.WordList", "WordListIDNavigation")
                        .WithMany()
                        .HasForeignKey("WordListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
